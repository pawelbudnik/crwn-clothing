{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nexport function* fetchCollectionsAsync() {\n  yield console.log('I am fired');\n  const collectionRef = firestore.collection('collections');\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["C:/Users/Pisko/Code/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsAsync","console","log","collectionRef","collection","get","then","snapshot","collectionsMap","dispatch","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAEA,QAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AAEID,EAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,UAAMC,cAAc,GAAGT,+BAA+B,CAACQ,QAAD,CAAtD;AACAE,IAAAA,QAAQ,CAACC,uBAAuB,CAACF,cAAD,CAAxB,CAAR;AACH,GAHD,EAGGG,KAHH,CAGSC,KAAK,IAAIH,QAAQ,CAACI,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAH1B;AAIP;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMnB,SAAS,CACXC,eAAe,CAACmB,uBADL,EAEXhB,qBAFW,CAAf;AAIH","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\r\nimport ShopActionTypes from './shop.types';\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\nexport function* fetchCollectionsAsync() {\r\n    yield console.log('I am fired');\r\n\r\n    const collectionRef = firestore.collection('collections');\r\n\r\n        collectionRef.get().then(snapshot => {\r\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n            dispatch(fetchCollectionsSuccess(collectionsMap));\r\n        }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeEvery(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START, \r\n        fetchCollectionsAsync    \r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}